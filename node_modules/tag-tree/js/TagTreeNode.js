"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _liveSet = _interopRequireDefault(require("live-set"));

var TagTreeNode =
/*#__PURE__*/
function () {
  function TagTreeNode(init) {
    var _this = this;

    (0, _classCallCheck2.default)(this, TagTreeNode);
    (0, _defineProperty2.default)(this, "_init", void 0);
    (0, _defineProperty2.default)(this, "_ownedNodes", new Map());
    (0, _defineProperty2.default)(this, "_ownedByTag", new Map());
    this._init = init;

    this._init.executor({
      node: this,
      addOwnedNode: function addOwnedNode(tag, node) {
        _this._ownedNodes.set(node, tag);

        var entry = _this._ownedByTag.get(tag);

        if (!entry) {
          entry = _this._createTagEntry();

          _this._ownedByTag.set(tag, entry);
        }

        var _entry = entry,
            controller = _entry.controller;
        controller.add(node);
      },
      removeOwnedNode: function removeOwnedNode(tag, node) {
        _this._ownedNodes.delete(node);

        var entry = _this._ownedByTag.get(tag);

        if (!entry) throw new Error('tag not owned');
        var controller = entry.controller;
        controller.remove(node);
      },
      end: function end() {
        _this._ownedByTag.forEach(function (_ref) {
          var controller = _ref.controller;
          controller.end();
        });
      }
    });

    this._init.executor = function () {}; // release reference

  }

  (0, _createClass2.default)(TagTreeNode, [{
    key: "_createTagEntry",
    value: function _createTagEntry() {
      return _liveSet.default.active();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this._init.value;
    }
  }, {
    key: "getParent",
    value: function getParent() {
      return this._init.parent || null;
    }
  }, {
    key: "getOwnedByTag",
    value: function getOwnedByTag(tag) {
      var entry = this._ownedByTag.get(tag);

      if (!entry) {
        if (!this._init.ownedTags.has(tag)) {
          throw new Error("tag not owned: ".concat(tag));
        }

        entry = this._createTagEntry();

        this._ownedByTag.set(tag, entry);
      }

      return entry.liveSet;
    }
  }, {
    key: "getOwned",
    value: function getOwned() {
      var m = new Map();

      this._ownedByTag.forEach(function (_ref2, tag) {
        var liveSet = _ref2.liveSet;
        m.set(tag, liveSet);
      });

      return m;
    }
  }, {
    key: "getTag",
    value: function getTag() {
      var parent = this._init.parent;
      return parent ? parent.getTagOfOwnedNode(this) : null;
    }
  }, {
    key: "ownsNode",
    value: function ownsNode(node) {
      return this._ownedNodes.has(node);
    }
  }, {
    key: "getTagOfOwnedNode",
    value: function getTagOfOwnedNode(node) {
      var tag = this._ownedNodes.get(node);

      if (tag == null) throw new Error('node not owned');
      return tag;
    }
  }]);
  return TagTreeNode;
}();

exports.default = TagTreeNode;
module.exports = exports.default;
module.exports.default = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UYWdUcmVlTm9kZS5qcyJdLCJuYW1lcyI6WyJUYWdUcmVlTm9kZSIsImluaXQiLCJNYXAiLCJfaW5pdCIsImV4ZWN1dG9yIiwibm9kZSIsImFkZE93bmVkTm9kZSIsInRhZyIsIl9vd25lZE5vZGVzIiwic2V0IiwiZW50cnkiLCJfb3duZWRCeVRhZyIsImdldCIsIl9jcmVhdGVUYWdFbnRyeSIsImNvbnRyb2xsZXIiLCJhZGQiLCJyZW1vdmVPd25lZE5vZGUiLCJkZWxldGUiLCJFcnJvciIsInJlbW92ZSIsImVuZCIsImZvckVhY2giLCJMaXZlU2V0IiwiYWN0aXZlIiwidmFsdWUiLCJwYXJlbnQiLCJvd25lZFRhZ3MiLCJoYXMiLCJsaXZlU2V0IiwibSIsImdldFRhZ09mT3duZWROb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7SUFzQnFCQSxXOzs7QUFLbkIsdUJBQVlDLElBQVosRUFBc0M7QUFBQTs7QUFBQTtBQUFBO0FBQUEsdURBSEssSUFBSUMsR0FBSixFQUdMO0FBQUEsdURBRkUsSUFBSUEsR0FBSixFQUVGO0FBQ3BDLFNBQUtDLEtBQUwsR0FBYUYsSUFBYjs7QUFDQSxTQUFLRSxLQUFMLENBQVdDLFFBQVgsQ0FBb0I7QUFDbEJDLE1BQUFBLElBQUksRUFBRSxJQURZO0FBRWxCQyxNQUFBQSxZQUFZLEVBQUUsc0JBQUNDLEdBQUQsRUFBTUYsSUFBTixFQUFlO0FBQzNCLFFBQUEsS0FBSSxDQUFDRyxXQUFMLENBQWlCQyxHQUFqQixDQUFxQkosSUFBckIsRUFBMkJFLEdBQTNCOztBQUNBLFlBQUlHLEtBQUssR0FBRyxLQUFJLENBQUNDLFdBQUwsQ0FBaUJDLEdBQWpCLENBQXFCTCxHQUFyQixDQUFaOztBQUNBLFlBQUksQ0FBQ0csS0FBTCxFQUFZO0FBQ1ZBLFVBQUFBLEtBQUssR0FBRyxLQUFJLENBQUNHLGVBQUwsRUFBUjs7QUFDQSxVQUFBLEtBQUksQ0FBQ0YsV0FBTCxDQUFpQkYsR0FBakIsQ0FBcUJGLEdBQXJCLEVBQTBCRyxLQUExQjtBQUNEOztBQU4wQixxQkFPTkEsS0FQTTtBQUFBLFlBT3BCSSxVQVBvQixVQU9wQkEsVUFQb0I7QUFRM0JBLFFBQUFBLFVBQVUsQ0FBQ0MsR0FBWCxDQUFlVixJQUFmO0FBQ0QsT0FYaUI7QUFZbEJXLE1BQUFBLGVBQWUsRUFBRSx5QkFBQ1QsR0FBRCxFQUFNRixJQUFOLEVBQWU7QUFDOUIsUUFBQSxLQUFJLENBQUNHLFdBQUwsQ0FBaUJTLE1BQWpCLENBQXdCWixJQUF4Qjs7QUFDQSxZQUFNSyxLQUFLLEdBQUcsS0FBSSxDQUFDQyxXQUFMLENBQWlCQyxHQUFqQixDQUFxQkwsR0FBckIsQ0FBZDs7QUFDQSxZQUFJLENBQUNHLEtBQUwsRUFBWSxNQUFNLElBQUlRLEtBQUosQ0FBVSxlQUFWLENBQU47QUFIa0IsWUFJdkJKLFVBSnVCLEdBSVRKLEtBSlMsQ0FJdkJJLFVBSnVCO0FBSzlCQSxRQUFBQSxVQUFVLENBQUNLLE1BQVgsQ0FBa0JkLElBQWxCO0FBQ0QsT0FsQmlCO0FBbUJsQmUsTUFBQUEsR0FBRyxFQUFFLGVBQU07QUFDVCxRQUFBLEtBQUksQ0FBQ1QsV0FBTCxDQUFpQlUsT0FBakIsQ0FBeUIsZ0JBQWtCO0FBQUEsY0FBaEJQLFVBQWdCLFFBQWhCQSxVQUFnQjtBQUN6Q0EsVUFBQUEsVUFBVSxDQUFDTSxHQUFYO0FBQ0QsU0FGRDtBQUdEO0FBdkJpQixLQUFwQjs7QUF5QkEsU0FBS2pCLEtBQUwsQ0FBV0MsUUFBWCxHQUFzQixZQUFNLENBQUUsQ0FBOUIsQ0EzQm9DLENBMkJKOztBQUNqQzs7OztzQ0FFOEI7QUFDN0IsYUFBT2tCLGlCQUFRQyxNQUFSLEVBQVA7QUFDRDs7OytCQUVhO0FBQ1osYUFBTyxLQUFLcEIsS0FBTCxDQUFXcUIsS0FBbEI7QUFDRDs7O2dDQUVnQztBQUMvQixhQUFPLEtBQUtyQixLQUFMLENBQVdzQixNQUFYLElBQXFCLElBQTVCO0FBQ0Q7OztrQ0FFYWxCLEcsRUFBc0M7QUFDbEQsVUFBSUcsS0FBSyxHQUFHLEtBQUtDLFdBQUwsQ0FBaUJDLEdBQWpCLENBQXFCTCxHQUFyQixDQUFaOztBQUNBLFVBQUksQ0FBQ0csS0FBTCxFQUFZO0FBQ1YsWUFBSSxDQUFDLEtBQUtQLEtBQUwsQ0FBV3VCLFNBQVgsQ0FBcUJDLEdBQXJCLENBQXlCcEIsR0FBekIsQ0FBTCxFQUFvQztBQUNsQyxnQkFBTSxJQUFJVyxLQUFKLDBCQUE0QlgsR0FBNUIsRUFBTjtBQUNEOztBQUNERyxRQUFBQSxLQUFLLEdBQUcsS0FBS0csZUFBTCxFQUFSOztBQUNBLGFBQUtGLFdBQUwsQ0FBaUJGLEdBQWpCLENBQXFCRixHQUFyQixFQUEwQkcsS0FBMUI7QUFDRDs7QUFDRCxhQUFPQSxLQUFLLENBQUNrQixPQUFiO0FBQ0Q7OzsrQkFFZ0Q7QUFDL0MsVUFBTUMsQ0FBQyxHQUFHLElBQUkzQixHQUFKLEVBQVY7O0FBQ0EsV0FBS1MsV0FBTCxDQUFpQlUsT0FBakIsQ0FBeUIsaUJBQVlkLEdBQVosRUFBb0I7QUFBQSxZQUFsQnFCLE9BQWtCLFNBQWxCQSxPQUFrQjtBQUMzQ0MsUUFBQUEsQ0FBQyxDQUFDcEIsR0FBRixDQUFNRixHQUFOLEVBQVdxQixPQUFYO0FBQ0QsT0FGRDs7QUFHQSxhQUFPQyxDQUFQO0FBQ0Q7Ozs2QkFFcUI7QUFBQSxVQUNiSixNQURhLEdBQ0gsS0FBS3RCLEtBREYsQ0FDYnNCLE1BRGE7QUFFcEIsYUFBT0EsTUFBTSxHQUFHQSxNQUFNLENBQUNLLGlCQUFQLENBQXlCLElBQXpCLENBQUgsR0FBb0MsSUFBakQ7QUFDRDs7OzZCQUVRekIsSSxFQUErQjtBQUN0QyxhQUFPLEtBQUtHLFdBQUwsQ0FBaUJtQixHQUFqQixDQUFxQnRCLElBQXJCLENBQVA7QUFDRDs7O3NDQUVpQkEsSSxFQUE4QjtBQUM5QyxVQUFNRSxHQUFHLEdBQUcsS0FBS0MsV0FBTCxDQUFpQkksR0FBakIsQ0FBcUJQLElBQXJCLENBQVo7O0FBQ0EsVUFBSUUsR0FBRyxJQUFJLElBQVgsRUFBaUIsTUFBTSxJQUFJVyxLQUFKLENBQVUsZ0JBQVYsQ0FBTjtBQUNqQixhQUFPWCxHQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgTGl2ZVNldCBmcm9tICdsaXZlLXNldCc7XG5pbXBvcnQgdHlwZSB7TGl2ZVNldENvbnRyb2xsZXJ9IGZyb20gJ2xpdmUtc2V0JztcblxuZXhwb3J0IHR5cGUgVGFnVHJlZU5vZGVDb250cm9sbGVyPFQ+ID0ge1xuICBub2RlOiBUYWdUcmVlTm9kZTxUPjtcbiAgYWRkT3duZWROb2RlKHRhZzogc3RyaW5nLCBub2RlOiBUYWdUcmVlTm9kZTxUPik6IHZvaWQ7XG4gIHJlbW92ZU93bmVkTm9kZSh0YWc6IHN0cmluZywgbm9kZTogVGFnVHJlZU5vZGU8VD4pOiB2b2lkO1xuICBlbmQoKTogdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIFRhZ1RyZWVOb2RlSW5pdDxUPiA9IHt8XG4gIHZhbHVlOiBUO1xuICBwYXJlbnQ6ID9UYWdUcmVlTm9kZTxUPjtcbiAgb3duZWRUYWdzOiBTZXQ8c3RyaW5nPjtcbiAgZXhlY3V0b3I6IChjb250cm9sbGVyOiBUYWdUcmVlTm9kZUNvbnRyb2xsZXI8VD4pID0+IHZvaWQ7XG58fTtcblxudHlwZSBUYWdFbnRyeTxUPiA9IHtcbiAgbGl2ZVNldDogTGl2ZVNldDxUYWdUcmVlTm9kZTxUPj47XG4gIGNvbnRyb2xsZXI6IExpdmVTZXRDb250cm9sbGVyPFRhZ1RyZWVOb2RlPFQ+Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhZ1RyZWVOb2RlPFQ+IHtcbiAgX2luaXQ6IFRhZ1RyZWVOb2RlSW5pdDxUPjtcbiAgX293bmVkTm9kZXM6IE1hcDxUYWdUcmVlTm9kZTxUPiwgc3RyaW5nPiA9IG5ldyBNYXAoKTtcbiAgX293bmVkQnlUYWc6IE1hcDxzdHJpbmcsIFRhZ0VudHJ5PFQ+PiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3Rvcihpbml0OiBUYWdUcmVlTm9kZUluaXQ8VD4pIHtcbiAgICB0aGlzLl9pbml0ID0gaW5pdDtcbiAgICB0aGlzLl9pbml0LmV4ZWN1dG9yKHtcbiAgICAgIG5vZGU6IHRoaXMsXG4gICAgICBhZGRPd25lZE5vZGU6ICh0YWcsIG5vZGUpID0+IHtcbiAgICAgICAgdGhpcy5fb3duZWROb2Rlcy5zZXQobm9kZSwgdGFnKTtcbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5fb3duZWRCeVRhZy5nZXQodGFnKTtcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgIGVudHJ5ID0gdGhpcy5fY3JlYXRlVGFnRW50cnkoKTtcbiAgICAgICAgICB0aGlzLl9vd25lZEJ5VGFnLnNldCh0YWcsIGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7Y29udHJvbGxlcn0gPSBlbnRyeTtcbiAgICAgICAgY29udHJvbGxlci5hZGQobm9kZSk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlT3duZWROb2RlOiAodGFnLCBub2RlKSA9PiB7XG4gICAgICAgIHRoaXMuX293bmVkTm9kZXMuZGVsZXRlKG5vZGUpO1xuICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuX293bmVkQnlUYWcuZ2V0KHRhZyk7XG4gICAgICAgIGlmICghZW50cnkpIHRocm93IG5ldyBFcnJvcigndGFnIG5vdCBvd25lZCcpO1xuICAgICAgICBjb25zdCB7Y29udHJvbGxlcn0gPSBlbnRyeTtcbiAgICAgICAgY29udHJvbGxlci5yZW1vdmUobm9kZSk7XG4gICAgICB9LFxuICAgICAgZW5kOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuX293bmVkQnlUYWcuZm9yRWFjaCgoe2NvbnRyb2xsZXJ9KSA9PiB7XG4gICAgICAgICAgY29udHJvbGxlci5lbmQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5faW5pdC5leGVjdXRvciA9ICgpID0+IHt9OyAvLyByZWxlYXNlIHJlZmVyZW5jZVxuICB9XG5cbiAgX2NyZWF0ZVRhZ0VudHJ5KCk6IFRhZ0VudHJ5PFQ+IHtcbiAgICByZXR1cm4gTGl2ZVNldC5hY3RpdmUoKTtcbiAgfVxuXG4gIGdldFZhbHVlKCk6IFQge1xuICAgIHJldHVybiB0aGlzLl9pbml0LnZhbHVlO1xuICB9XG5cbiAgZ2V0UGFyZW50KCk6IG51bGx8VGFnVHJlZU5vZGU8VD4ge1xuICAgIHJldHVybiB0aGlzLl9pbml0LnBhcmVudCB8fCBudWxsO1xuICB9XG5cbiAgZ2V0T3duZWRCeVRhZyh0YWc6IHN0cmluZyk6IExpdmVTZXQ8VGFnVHJlZU5vZGU8VD4+IHtcbiAgICBsZXQgZW50cnkgPSB0aGlzLl9vd25lZEJ5VGFnLmdldCh0YWcpO1xuICAgIGlmICghZW50cnkpIHtcbiAgICAgIGlmICghdGhpcy5faW5pdC5vd25lZFRhZ3MuaGFzKHRhZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0YWcgbm90IG93bmVkOiAke3RhZ31gKTtcbiAgICAgIH1cbiAgICAgIGVudHJ5ID0gdGhpcy5fY3JlYXRlVGFnRW50cnkoKTtcbiAgICAgIHRoaXMuX293bmVkQnlUYWcuc2V0KHRhZywgZW50cnkpO1xuICAgIH1cbiAgICByZXR1cm4gZW50cnkubGl2ZVNldDtcbiAgfVxuXG4gIGdldE93bmVkKCk6IE1hcDxzdHJpbmcsIExpdmVTZXQ8VGFnVHJlZU5vZGU8VD4+PiB7XG4gICAgY29uc3QgbSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9vd25lZEJ5VGFnLmZvckVhY2goKHtsaXZlU2V0fSwgdGFnKSA9PiB7XG4gICAgICBtLnNldCh0YWcsIGxpdmVTZXQpO1xuICAgIH0pO1xuICAgIHJldHVybiBtO1xuICB9XG5cbiAgZ2V0VGFnKCk6IG51bGx8c3RyaW5nIHtcbiAgICBjb25zdCB7cGFyZW50fSA9IHRoaXMuX2luaXQ7XG4gICAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5nZXRUYWdPZk93bmVkTm9kZSh0aGlzKSA6IG51bGw7XG4gIH1cblxuICBvd25zTm9kZShub2RlOiBUYWdUcmVlTm9kZTxUPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9vd25lZE5vZGVzLmhhcyhub2RlKTtcbiAgfVxuXG4gIGdldFRhZ09mT3duZWROb2RlKG5vZGU6IFRhZ1RyZWVOb2RlPFQ+KTogc3RyaW5nIHtcbiAgICBjb25zdCB0YWcgPSB0aGlzLl9vd25lZE5vZGVzLmdldChub2RlKTtcbiAgICBpZiAodGFnID09IG51bGwpIHRocm93IG5ldyBFcnJvcignbm9kZSBub3Qgb3duZWQnKTtcbiAgICByZXR1cm4gdGFnO1xuICB9XG59XG4iXX0=