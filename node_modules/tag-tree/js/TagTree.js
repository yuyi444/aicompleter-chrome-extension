"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _liveSet = _interopRequireDefault(require("live-set"));

var _TagTreeNode2 = _interopRequireDefault(require("./TagTreeNode"));

var EMPTY_ARRAY = Object.freeze([]);

var TagTree =
/*#__PURE__*/
function (_TagTreeNode) {
  (0, _inherits2.default)(TagTree, _TagTreeNode);

  function TagTree(init) {
    var _this;

    (0, _classCallCheck2.default)(this, TagTree);
    var rootNodeController;
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TagTree).call(this, {
      value: init.root,
      parent: null,
      ownedTags: new Set(init.tags.map(function (_ref) {
        var tag = _ref.tag;
        return tag;
      })),
      executor: function executor(controller) {
        rootNodeController = controller;
      }
    }));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "_nodeControllers", new Map());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "_lookupTable", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "_allByTag", void 0);
    if (!rootNodeController) throw new Error();

    _this._nodeControllers.set((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), rootNodeController);

    _this._lookupTable = new Map([[init.root, [(0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this))]]]);
    _this._allByTag = new Map();
    init.tags.forEach(function (_ref2) {
      var tag = _ref2.tag;

      var _LiveSet$active = _liveSet.default.active(),
          liveSet = _LiveSet$active.liveSet,
          controller = _LiveSet$active.controller;

      if (_this._allByTag.has(tag)) throw new Error('Tag specified twice: ' + tag);

      _this._allByTag.set(tag, {
        ownedTags: new Set(),
        liveSet: liveSet,
        controller: controller
      });
    });
    init.tags.forEach(function (_ref3) {
      var tag = _ref3.tag,
          ownedBy = _ref3.ownedBy;
      if (!ownedBy) return;
      ownedBy.forEach(function (owningTag) {
        var entry = _this._allByTag.get(owningTag);

        if (!entry) throw new Error("unknown ownedBy value for ".concat(tag, ": ").concat(owningTag));
        entry.ownedTags.add(tag);
      });
    });
    var controller = {
      tree: (0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)),
      addTaggedValue: function addTaggedValue(parent, tag, value) {
        var tagEntry = _this._allByTag.get(tag);

        if (!tagEntry) throw new Error("unknown tag: ".concat(tag));
        var controller;
        var node = new _TagTreeNode2.default({
          value: value,
          parent: parent,
          ownedTags: tagEntry.ownedTags,
          executor: function executor(_controller) {
            controller = _controller;
          }
        });
        if (!controller) throw new Error();

        _this._nodeControllers.set(node, controller);

        tagEntry.controller.add(node);

        var valueNodes = _this._lookupTable.get(value);

        if (valueNodes) {
          valueNodes.push(node);
        } else {
          _this._lookupTable.set(value, [node]);
        }

        var parentController = _this._nodeControllers.get(parent);

        if (!parentController) throw new Error('parent is not part of TagTree');
        parentController.addOwnedNode(tag, node);
        return node;
      },
      removeTaggedNode: function removeTaggedNode(parent, tag, node) {
        var tagEntry = _this._allByTag.get(tag);

        if (!tagEntry) throw new Error("unknown tag: ".concat(tag));

        var parentController = _this._nodeControllers.get(parent);

        if (!parentController) throw new Error('parent is not part of TagTree');
        var value = node.getValue();

        var nodes = _this._lookupTable.get(value);

        if (!nodes) throw new Error('node was missing from lookup table before removal');

        if (nodes.length > 1) {
          var ix = nodes.indexOf(node);
          if (ix < 0) throw new Error('node was missing from list in lookup table before removal');
          nodes.splice(ix, 1);
        } else {
          _this._lookupTable.delete(value);
        }

        node.getOwned().forEach(function (liveSet, tag) {
          liveSet.values().forEach(function (childNode) {
            controller.removeTaggedNode(node, tag, childNode);
          });
        });
        tagEntry.controller.remove(node);
        parentController.removeOwnedNode(tag, node);

        _this._nodeControllers.delete(node);
      },
      end: function end() {
        _this._nodeControllers.forEach(function (controller) {
          controller.end();
        });

        _this._allByTag.forEach(function (_ref4) {
          var controller = _ref4.controller;
          controller.end();
        });
      }
    };
    init.executor(controller);

    init.executor = function () {}; // release reference


    return _this;
  }

  (0, _createClass2.default)(TagTree, [{
    key: "getNodesForValue",
    value: function getNodesForValue(value) {
      var l = this._lookupTable.get(value);

      return l ? Object.freeze(l.slice()) : EMPTY_ARRAY;
    }
  }, {
    key: "getAllByTag",
    value: function getAllByTag(tag) {
      var entry = this._allByTag.get(tag);

      if (!entry) throw new Error("tag does not exist in TagTree: ".concat(tag));
      return entry.liveSet;
    }
  }, {
    key: "getAll",
    value: function getAll() {
      var m = new Map();

      this._allByTag.forEach(function (_ref5, tag) {
        var liveSet = _ref5.liveSet;
        m.set(tag, liveSet);
      });

      return m;
    }
  }]);
  return TagTree;
}(_TagTreeNode2.default);

exports.default = TagTree;
module.exports = exports.default;
module.exports.default = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,