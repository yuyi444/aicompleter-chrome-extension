"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flatMapR;

var _ = _interopRequireDefault(require("."));

function flatMapR(liveSet, cb) {
  var isReading = false;
  return new _.default({
    scheduler: liveSet.getScheduler(),
    read: function read() {
      if (isReading) {
        throw new Error('reading inactive recursively-flatMapped stream is not supported');
      }

      isReading = true;
      var s = new Set();
      liveSet.values().forEach(function (value) {
        var childSet = cb(value);
        childSet.values().forEach(function (value) {
          s.add(value);
        });
      });
      isReading = false;
      return s;
    },
    listen: function listen(setValues, controller) {
      var mainSubCompleted = false;
      var hasSubscribedToChildren = false;
      var nextHasFired = false;
      var childSetSubs = new Map();

      function childSetSubscribe(childSet) {
        if (childSet.isEnded()) {
          // optimization
          childSet.values().forEach(function (value) {
            controller.add(value);
          });
        } else {
          childSet.subscribe({
            start: function start(sub) {
              childSetSubs.set(childSet, sub);
              childSet.values().forEach(function (value) {
                controller.add(value);
              });
            },
            next: function next(changes) {
              nextHasFired = true;
              changes.forEach(function (change) {
                if (change.type === 'add') {
                  controller.add(change.value);
                } else if (change.type === 'remove') {
                  controller.remove(change.value);
                }
              });
            },
            error: function error(err) {
              controller.error(err);
            },
            complete: function complete() {
              childSetSubs.delete(childSet);

              if (mainSubCompleted && childSetSubs.size === 0) {
                controller.end();
              }
            }
          });
        }
      }

      setValues(new Set());
      var childSets = new Map();
      var mainSub = liveSet.subscribe({
        start: function start() {
          liveSet.values().forEach(function (value) {
            var childSet = cb(value);
            childSets.set(value, childSet);
            childSetSubscribe(childSet);
          });
          hasSubscribedToChildren = true;
        },
        next: function next(changes) {
          nextHasFired = true;
          changes.forEach(function (change) {
            if (change.type === 'add') {
              var childSet = cb(change.value);
              childSets.set(change.value, childSet);
              childSetSubscribe(childSet);
            } else if (change.type === 'remove') {
              var _childSet = childSets.get(change.value);

              if (!_childSet) throw new Error('removed value not in liveset');

              _childSet.values().forEach(function (value) {
                controller.remove(value);
              });

              childSets.delete(change.value);
              var childSetSub = childSetSubs.get(_childSet);

              if (childSetSub) {
                // We won't have the subscription if the childSet ended already
                childSetSub.unsubscribe();
                childSetSubs.delete(_childSet);
              }
            }
          });
        },
        error: function error(err) {
          controller.error(err);
        },
        complete: function complete() {
          mainSubCompleted = true;

          if (hasSubscribedToChildren && childSetSubs.size === 0) {
            controller.end();
          }
        }
      });
      var isPullingChanges = false;
      return {
        unsubscribe: function unsubscribe() {
          mainSub.unsubscribe();
          childSetSubs.forEach(function (sub) {
            sub.unsubscribe();
          });
          childSets.clear();
          childSetSubs.clear();
        },
        pullChanges: function pullChanges() {
          if (isPullingChanges) return;
          isPullingChanges = true;

          do {
            nextHasFired = false;
            mainSub.pullChanges();
            childSetSubs.forEach(function (sub) {
              sub.pullChanges();
            });
          } while (nextHasFired);

          isPullingChanges = false;
        }
      };
    }
  });
}

module.exports = exports.default;
module.exports.default = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,