"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Scheduler = _interopRequireDefault(require("./Scheduler"));

var _symbolObservable = _interopRequireDefault(require("symbol-observable"));

var LiveSet =
/*#__PURE__*/
function () {
  // Whether we can mutate the _values Set.
  function LiveSet(init) {
    (0, _classCallCheck2.default)(this, LiveSet);
    (0, _defineProperty2.default)(this, "_init", void 0);
    (0, _defineProperty2.default)(this, "_scheduler", void 0);
    (0, _defineProperty2.default)(this, "_values", null);
    (0, _defineProperty2.default)(this, "_mutableValues", false);
    (0, _defineProperty2.default)(this, "_active", null);
    (0, _defineProperty2.default)(this, "_inSubscriptionStart", false);
    (0, _defineProperty2.default)(this, "_ended", false);
    (0, _defineProperty2.default)(this, "_endedWithError", false);
    (0, _defineProperty2.default)(this, "_error", null);
    (0, _defineProperty2.default)(this, "_queuedCall", false);
    (0, _defineProperty2.default)(this, "_changeQueue", []);
    (0, _defineProperty2.default)(this, "_observers", []);
    this._init = init;
    this._scheduler = init.scheduler || LiveSet.defaultScheduler;
  }

  (0, _createClass2.default)(LiveSet, [{
    key: "_queueChange",
    value: function _queueChange(record) {
      var _this = this;

      if (record) {
        this._changeQueue.push(record);
      }

      if (!this._queuedCall) {
        this._queuedCall = true;

        this._scheduler.schedule(function () {
          _this._queuedCall = false;
          var changes = _this._changeQueue;
          _this._changeQueue = [];
          var observersToCall;
          var ended = _this._ended;

          if (ended) {
            observersToCall = _this._observers;
            _this._observers = [];
          } else {
            observersToCall = _this._observers.slice();
          }

          observersToCall.forEach(function (record) {
            var observer = record.observer,
                ignore = record.ignore;
            var observerNext = observer.next;

            if (observerNext) {
              if (ignore === 0) {
                observerNext.call(observer, changes);
              } else {
                record.ignore = 0;
                var changesToDeliver = changes.slice(ignore);

                if (changesToDeliver.length) {
                  observerNext.call(observer, changesToDeliver);
                }
              }
            }

            if (ended) {
              if (_this._endedWithError) {
                if (observer.error) observer.error(_this._error);
              } else {
                if (observer.complete) observer.complete();
              }
            }
          });
        });
      }
    }
  }, {
    key: "_deactivate",
    value: function _deactivate() {
      if (!this._active) throw new Error('already inactive');
      var listenHandler = this._active.listenHandler;
      this._active = null;

      if (listenHandler) {
        listenHandler.unsubscribe();
      }
    }
  }, {
    key: "values",
    value: function values() {
      if (this._values) {
        if (this._active && !this._inSubscriptionStart) {
          var listenHandler = this._active.listenHandler;

          if (listenHandler.pullChanges) {
            listenHandler.pullChanges();
          }
        }

        if (this._mutableValues) {
          this._mutableValues = false;
          makeSetImmutable(this._values);
        }
        /*:: if (!this._values) throw new Error(); */


        return this._values;
      } else {
        if (this._active) {
          throw new Error('tried to call values() on liveset during subscription before setValues was called');
        }

        var s = this._init.read();

        makeSetImmutable(s);
        return s;
      }
    }
  }, {
    key: "isEnded",
    value: function isEnded() {
      return this._ended;
    }
  }, {
    key: "getScheduler",
    value: function getScheduler() {
      return this._scheduler;
    }
  }, {
    key: "subscribe",
    value: function subscribe(observerOrOnNext, onError, onComplete) {
      var _this2 = this;

      var liveSet = this;
      var observer;

      if (typeof observerOrOnNext === 'function') {
        observer = {
          next: observerOrOnNext,
          error: onError,
          complete: onComplete
        };
      } else {
        observer = observerOrOnNext;
      }

      observer;

      if (this._ended) {
        var _subscription = {
          closed: false,
          unsubscribe: function unsubscribe() {
            _subscription.closed = true;
          },
          pullChanges: function pullChanges() {}
        };

        if (observer.start) {
          observer.start(_subscription);
        }

        if (!_subscription.closed) {
          if (this._endedWithError) {
            if (observer.error) {
              observer.error(this._error);
            }
          } else {
            if (observer.complete) {
              observer.complete();
            }
          }
        }

        _subscription.closed = true;
        return _subscription;
      }

      var observerRecord = {
        observer: observer,
        ignore: this._changeQueue.length
      };
      var isStarting = true;
      var unsubscribedInStart = false;
      var subscription = {
        /*:: closed: false&&` */
        get closed() {
          return !isStarting && liveSet._observers.indexOf(observerRecord) < 0;
        }
        /*:: ` */
        ,

        unsubscribe: function unsubscribe() {
          if (isStarting) {
            unsubscribedInStart = true;
            return;
          }

          var ix = _this2._observers.indexOf(observerRecord);

          if (ix >= 0) {
            _this2._observers.splice(ix, 1);

            if (!_this2._ended && _this2._observers.length === 0) {
              _this2._values = null;

              _this2._deactivate();
            }
          }
        },
        pullChanges: function pullChanges() {
          if (_this2._active && _this2._active.listenHandler && _this2._active.listenHandler.pullChanges) {
            _this2._active.listenHandler.pullChanges();
          }

          var changeQueueLength = _this2._changeQueue.length;
          var originalNext = observer.next;

          if (changeQueueLength !== 0 && originalNext) {
            var changesToDeliver = _this2._changeQueue.slice(observerRecord.ignore);

            if (changesToDeliver.length !== 0) {
              observerRecord.ignore = changeQueueLength;
              originalNext.call(observer, changesToDeliver);
            }
          }
        }
      };

      if (!this._active) {
        var _controller2 = {
          // Flow doesn't support getters and setters yet

          /*:: closed: false&&` */
          get closed() {
            return !liveSet._active || liveSet._active.controller !== this;
          }
          /*:: ` */
          ,

          add: function add(value) {
            var values = _this2._values;
            if (!values) throw new Error('setValue must be called before controller is used');

            if (!_this2._ended && !values.has(value)) {
              if (!_this2._mutableValues) {
                _this2._values = values = new Set(values);
                _this2._mutableValues = true;
              }

              values.add(value);

              _this2._queueChange({
                type: 'add',
                value: value
              });
            }
          },
          remove: function remove(value) {
            var values = _this2._values;
            if (!values) throw new Error('setValue must be called before controller is used');

            if (!_this2._ended && values.has(value)) {
              if (!_this2._mutableValues) {
                _this2._values = values = new Set(values);
                _this2._mutableValues = true;
              }

              values.delete(value);

              _this2._queueChange({
                type: 'remove',
                value: value
              });
            }
          },
          error: function error(err) {
            if (_this2._ended) return;
            _this2._ended = true;
            _this2._endedWithError = true;
            _this2._error = err;

            _this2._queueChange();

            _this2._deactivate();
          },
          end: function end() {
            if (_this2._ended) return;
            _this2._ended = true;

            _this2._queueChange();

            _this2._deactivate();
          }
        };
        var active = this._active = {
          controller: _controller2,
          listenHandler: {
            unsubscribe: function unsubscribe() {}
          }
        };

        var setValuesError = function setValuesError() {
          throw new Error('setValues must be called once during listen');
        };

        var _setValues2 = function _setValues(values) {
          _setValues2 = setValuesError;
          makeSetImmutable(values);
          _this2._values = values;
          _this2._mutableValues = false;
        };

        var listenHandlerOrFunction = this._init.listen(function (values) {
          return _setValues2(values);
        }, _controller2);

        if (!this._values) {
          setValuesError();
        }

        if (typeof listenHandlerOrFunction === 'function') {
          active.listenHandler = {
            unsubscribe: listenHandlerOrFunction
          };
        } else if (listenHandlerOrFunction != null && typeof listenHandlerOrFunction.unsubscribe === 'function') {
          active.listenHandler = listenHandlerOrFunction;
        } else if (listenHandlerOrFunction != null) {
          throw new TypeError('listen must return object with unsubscribe method, a function, or null');
        }

        if (_controller2.closed) {
          this._active = active;

          this._deactivate();
        }
      }

      if (observer.start) {
        this._inSubscriptionStart = true;
        observer.start(subscription);
        this._inSubscriptionStart = false;
      }

      isStarting = false;
      observerRecord.ignore = this._changeQueue.length;

      if (!unsubscribedInStart) {
        this._observers.push(observerRecord);
      }

      return subscription;
    }
  }], [{
    key: "active",
    value: function active(initialValues, options) {
      var set = initialValues || new Set();
      var controller;
      var liveSet = new LiveSet({
        scheduler: options ? options.scheduler : undefined,
        read: function read() {
          return set;
        },
        listen: function listen(setValues, _controller) {
          setValues(set);
          controller = _controller;
        }
      });
      liveSet.subscribe({});
      return {
        liveSet: liveSet,
        controller: controller
      };
    }
  }, {
    key: "constant",
    value: function constant(values, options) {
      makeSetImmutable(values);

      var shouldNotHappen = function shouldNotHappen() {
        throw new Error('Should not happen');
      };

      var ls = new LiveSet({
        scheduler: options ? options.scheduler : undefined,
        read: shouldNotHappen,
        listen: shouldNotHappen
      });
      ls._ended = true;
      ls._values = values;
      ls._mutableValues = false;
      return ls;
    }
  }]);
  return LiveSet;
}(); // Assign here because Flow doesn't support computed property keys on classes:
// https://github.com/facebook/flow/issues/2286


exports.default = LiveSet;
(0, _defineProperty2.default)(LiveSet, "defaultScheduler", new _Scheduler.default());

LiveSet.prototype[_symbolObservable.default] = function () {
  return this;
};

function makeSetImmutable(set) {
  if (process.env.NODE_ENV !== 'production') {
    set.add = set.delete = set.clear = readOnly;
  }
}

function readOnly() {
  throw new Error('Do not modify Set passed to or from LiveSet: Set is read-only in development');
}

module.exports = exports.default;
module.exports.default = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,