"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transduce;

var _ = _interopRequireDefault(require("."));

var arrayXf = {
  '@@transducer/init': function transducerInit() {
    return [];
  },
  '@@transducer/step': function transducerStep(res, input) {
    res.push(input);
    return res;
  },
  '@@transducer/result': function transducerResult(input) {
    return input;
  }
};

function transduce(liveSet, transducer) {
  function step(xform, inputValue) {
    var addsComplete = false;
    var outputValues;
    var ret = xform['@@transducer/step']([], inputValue);

    if (ret && ret['@@transducer/reduced']) {
      outputValues = ret['@@transducer/value'];
      addsComplete = true;
    } else {
      outputValues = ret;
    }

    return {
      outputValues: outputValues,
      addsComplete: addsComplete
    };
  }

  function valuesAndContext() {
    var inputToOutputValues = new Map();
    var xform = transducer(arrayXf);
    var addsComplete = false;
    var values = new Set(xform['@@transducer/init']());
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = liveSet.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var value = _step.value;

        var _step2 = step(xform, value),
            outputValues = _step2.outputValues,
            _addsComplete = _step2.addsComplete;

        inputToOutputValues.set(value, outputValues);

        for (var i = 0, len = outputValues.length; i < len; i++) {
          values.add(outputValues[i]);
        }

        if (_addsComplete) {
          addsComplete = true;
          xform['@@transducer/result']([]).forEach(function (value) {
            values.add(value);
          });
          break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return {
      values: values,
      inputToOutputValues: inputToOutputValues,
      xform: xform,
      addsComplete: addsComplete
    };
  }

  return new _.default({
    scheduler: liveSet.getScheduler(),
    read: function read() {
      return valuesAndContext().values;
    },
    listen: function listen(setValues, controller) {
      var inputToOutputValues, xform, addsComplete;
      var sub = liveSet.subscribe({
        start: function start() {
          var ret = valuesAndContext();
          setValues(ret.values);
          inputToOutputValues = ret.inputToOutputValues;
          xform = ret.xform;
          addsComplete = ret.addsComplete;
        },
        next: function next(changes) {
          for (var i = 0, len = changes.length; i < len; i++) {
            var change = changes[i];

            if (change.type === 'add') {
              if (!addsComplete) {
                var value = change.value;

                var _step3 = step(xform, value),
                    outputValues = _step3.outputValues,
                    _addsComplete = _step3.addsComplete;

                inputToOutputValues.set(value, outputValues);

                for (var _i = 0, _len = outputValues.length; _i < _len; _i++) {
                  controller.add(outputValues[_i]);
                }

                if (_addsComplete) {
                  addsComplete = true;
                  xform['@@transducer/result']([]).forEach(function (endValue) {
                    controller.add(endValue);
                  });
                }
              }
            } else if (change.type === 'remove') {
              var _value = change.value;
              var list = inputToOutputValues.get(_value);
              if (!list) throw new Error('value had not been added');
              list.forEach(function (transformedValue) {
                controller.remove(transformedValue);
              });
              inputToOutputValues.delete(_value);
            }
          }
        },
        error: function error(err) {
          controller.error(err);
        },
        complete: function complete() {
          controller.end();
        }
      });
      return sub;
    }
  });
}

module.exports = exports.default;
module.exports.default = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,