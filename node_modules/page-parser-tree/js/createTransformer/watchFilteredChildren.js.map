{"version":3,"sources":["../../src/createTransformer/watchFilteredChildren.js"],"names":["watchFilteredChildren","input","condFn","LiveSet","scheduler","getScheduler","read","Error","listen","setValues","controller","Set","inputEntries","Map","outputEcs","newEc","ec","addedNode","child","nodeType","childEc","el","parents","set","add","removedNode","get","remove","changesHandler","mutations","length","removedEls","addedEls","forEach","addedNodes","removedNodes","i","len","has","push","mutation","Array","prototype","call","children","observer","MutationObserver","observe","childList","removedEc","entry","takeRecords","disconnect","sub","subscribe","start","values","next","changes","change","type","value","unsubscribe","pullChanges"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport LiveSet from 'live-set';\n\nimport type { ElementContext } from '../internalTypes';\n\nexport default function watchFilteredChildren(\n  input: LiveSet<ElementContext>,\n  condFn: (el: HTMLElement) => boolean\n): LiveSet<ElementContext> {\n  return new LiveSet({\n    scheduler: input.getScheduler(),\n    read() {\n      throw new Error();\n    },\n    listen(setValues, controller) {\n      setValues(new Set());\n\n      const inputEntries: Map<\n        ElementContext,\n        { observer: MutationObserver, removedNode: * }\n      > = new Map();\n      const outputEcs: Map<HTMLElement, ElementContext> = new Map();\n\n      function newEc(ec: ElementContext) {\n        function addedNode(child: Node) {\n          if (child.nodeType !== 1) return;\n          /*:: if (!(child instanceof HTMLElement)) throw new Error() */\n          if (condFn(child)) {\n            const childEc = { el: child, parents: ec.parents };\n            outputEcs.set(child, childEc);\n            controller.add(childEc);\n          }\n        }\n\n        function removedNode(child: Node) {\n          if (child.nodeType !== 1) return;\n          /*:: if (!(child instanceof HTMLElement)) throw new Error() */\n          const childEc = outputEcs.get(child);\n          if (!childEc) return;\n          outputEcs.delete(child);\n          controller.remove(childEc);\n        }\n\n        function changesHandler(mutations) {\n          if (mutations.length > 1) {\n            // If any removals are followed by a re-add, then drop the pair.\n            const removedEls = new Set();\n            const addedEls = [];\n            mutations.forEach(({ addedNodes, removedNodes }) => {\n              for (let i = 0, len = removedNodes.length; i < len; i++) {\n                const el = removedNodes[i];\n                if (el.nodeType !== 1) continue;\n                removedEls.add(removedNodes[i]);\n              }\n              for (let i = 0, len = addedNodes.length; i < len; i++) {\n                const el = addedNodes[i];\n                if (el.nodeType !== 1) continue;\n                if (removedEls.has(el)) {\n                  removedEls.delete(el);\n                } else {\n                  addedEls.push(el);\n                }\n              }\n            });\n            addedEls.forEach(addedNode);\n            removedEls.forEach(removedNode);\n          } else {\n            mutations.forEach(mutation => {\n              Array.prototype.forEach.call(mutation.addedNodes, addedNode);\n              Array.prototype.forEach.call(mutation.removedNodes, removedNode);\n            });\n          }\n        }\n\n        Array.prototype.forEach.call(ec.el.children, addedNode);\n\n        const observer = new MutationObserver(changesHandler);\n        observer.observe(ec.el, { childList: true });\n\n        inputEntries.set(ec, { observer, removedNode });\n      }\n\n      function removedEc(ec: ElementContext) {\n        const entry = inputEntries.get(ec);\n        if (!entry)\n          throw new Error('Should not happen: Unseen ElementContext removed');\n        entry.observer.takeRecords().forEach(mutation => {\n          Array.prototype.forEach.call(\n            mutation.removedNodes,\n            entry.removedNode\n          );\n        });\n        entry.observer.disconnect();\n        Array.prototype.forEach.call(ec.el.children, entry.removedNode);\n        inputEntries.delete(ec);\n      }\n\n      const sub = input.subscribe({\n        start() {\n          input.values().forEach(newEc);\n        },\n        next(changes) {\n          changes.forEach(change => {\n            if (change.type === 'add') {\n              newEc(change.value);\n            } else if (change.type === 'remove') {\n              removedEc(change.value);\n            }\n          });\n        }\n      });\n\n      return {\n        unsubscribe() {\n          sub.unsubscribe();\n          inputEntries.forEach(({ observer }) => {\n            observer.disconnect();\n          });\n        },\n        pullChanges() {\n          sub.pullChanges();\n          // Don't bother doing observer.takeRecords(), we don't need that in\n          // PageParserTree for how we use pullChanges().\n        }\n      };\n    }\n  });\n}\n"],"file":"watchFilteredChildren.js"}