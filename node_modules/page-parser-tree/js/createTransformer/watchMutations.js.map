{"version":3,"sources":["../../src/createTransformer/watchMutations.js"],"names":["watchMutations","input","attributeFilter","condFn","LiveSet","scheduler","getScheduler","read","Error","listen","setValues","controller","Set","entries","Map","newEc","ec","mo","MutationObserver","changes","length","el","entry","passed","add","remove","observe","attributes","set","removedEc","get","disconnect","sub","subscribe","start","values","forEach","next","change","type","value","unsubscribe","pullChanges"],"mappings":";;;;;;;;;AAEA;;AAIe,SAASA,cAAT,CACbC,KADa,EAEbC,eAFa,EAGbC,MAHa,EAIY;AACzB,SAAO,IAAIC,mBAAJ,CAAY;AACjBC,IAAAA,SAAS,EAAEJ,KAAK,CAACK,YAAN,EADM;AAEjBC,IAAAA,IAFiB,kBAEV;AACL,YAAM,IAAIC,KAAJ,EAAN;AACD,KAJgB;AAKjBC,IAAAA,MALiB,kBAKVC,SALU,EAKCC,UALD,EAKa;AAC5BD,MAAAA,SAAS,CAAC,IAAIE,GAAJ,EAAD,CAAT;AAEA,UAAMC,OAGL,GAAG,IAAIC,GAAJ,EAHJ;;AAKA,eAASC,KAAT,CAAeC,EAAf,EAAmC;AACjC,YAAMC,EAAE,GAAG,IAAIC,gBAAJ,CAAqB,UAAAC,OAAO,EAAI;AACzC,cAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;;AAC1B,cAAIjB,MAAM,CAACa,EAAE,CAACK,EAAJ,CAAV,EAAmB;AACjB,gBAAI,CAACC,KAAK,CAACC,MAAX,EAAmB;AACjBD,cAAAA,KAAK,CAACC,MAAN,GAAe,IAAf;AACAZ,cAAAA,UAAU,CAACa,GAAX,CAAeR,EAAf;AACD;AACF,WALD,MAKO;AACL,gBAAIM,KAAK,CAACC,MAAV,EAAkB;AAChBD,cAAAA,KAAK,CAACC,MAAN,GAAe,KAAf;AACAZ,cAAAA,UAAU,CAACc,MAAX,CAAkBT,EAAlB;AACD;AACF;AACF,SAbU,CAAX;AAeA,YAAMM,KAAK,GAAG;AAAEL,UAAAA,EAAE,EAAFA,EAAF;AAAMM,UAAAA,MAAM,EAAE;AAAd,SAAd;;AACA,YAAIpB,MAAM,CAACa,EAAE,CAACK,EAAJ,CAAV,EAAmB;AACjBC,UAAAA,KAAK,CAACC,MAAN,GAAe,IAAf;AACAZ,UAAAA,UAAU,CAACa,GAAX,CAAeR,EAAf;AACD;;AACDC,QAAAA,EAAE,CAACS,OAAH,CAAWV,EAAE,CAACK,EAAd,EAAkB;AAAEM,UAAAA,UAAU,EAAE,IAAd;AAAoBzB,UAAAA,eAAe,EAAfA;AAApB,SAAlB;AACAW,QAAAA,OAAO,CAACe,GAAR,CAAYZ,EAAZ,EAAgBM,KAAhB;AACD;;AAED,eAASO,SAAT,CAAmBb,EAAnB,EAAuC;AACrC,YAAMM,KAAK,GAAGT,OAAO,CAACiB,GAAR,CAAYd,EAAZ,CAAd;AACA,YAAI,CAACM,KAAL,EACE,MAAM,IAAId,KAAJ,CAAU,kDAAV,CAAN;AACFc,QAAAA,KAAK,CAACL,EAAN,CAASc,UAAT;;AACA,YAAIT,KAAK,CAACC,MAAV,EAAkB;AAChBZ,UAAAA,UAAU,CAACc,MAAX,CAAkBT,EAAlB;AACD;;AACDH,QAAAA,OAAO,UAAP,CAAeG,EAAf;AACD;;AAED,UAAMgB,GAAG,GAAG/B,KAAK,CAACgC,SAAN,CAAgB;AAC1BC,QAAAA,KAD0B,mBAClB;AACNjC,UAAAA,KAAK,CAACkC,MAAN,GAAeC,OAAf,CAAuBrB,KAAvB;AACD,SAHyB;AAI1BsB,QAAAA,IAJ0B,gBAIrBlB,OAJqB,EAIZ;AACZA,UAAAA,OAAO,CAACiB,OAAR,CAAgB,UAAAE,MAAM,EAAI;AACxB,gBAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzBxB,cAAAA,KAAK,CAACuB,MAAM,CAACE,KAAR,CAAL;AACD,aAFD,MAEO,IAAIF,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AACnCV,cAAAA,SAAS,CAACS,MAAM,CAACE,KAAR,CAAT;AACD;AACF,WAND;AAOD;AAZyB,OAAhB,CAAZ;AAeA,aAAO;AACLC,QAAAA,WADK,yBACS;AACZT,UAAAA,GAAG,CAACS,WAAJ;AACA5B,UAAAA,OAAO,CAACuB,OAAR,CAAgB,gBAAY;AAAA,gBAATnB,EAAS,QAATA,EAAS;AAC1BA,YAAAA,EAAE,CAACc,UAAH;AACD,WAFD;AAGD,SANI;AAOLW,QAAAA,WAPK,yBAOS;AACZV,UAAAA,GAAG,CAACU,WAAJ,GADY,CAEZ;AACA;AACD;AAXI,OAAP;AAaD;AA7EgB,GAAZ,CAAP;AA+ED","sourcesContent":["/* @flow */\n\nimport LiveSet from 'live-set';\n\nimport type { ElementContext } from '../internalTypes';\n\nexport default function watchMutations(\n  input: LiveSet<ElementContext>,\n  attributeFilter: string[],\n  condFn: (el: HTMLElement) => boolean\n): LiveSet<ElementContext> {\n  return new LiveSet({\n    scheduler: input.getScheduler(),\n    read() {\n      throw new Error();\n    },\n    listen(setValues, controller) {\n      setValues(new Set());\n\n      const entries: Map<\n        ElementContext,\n        { mo: MutationObserver, passed: boolean }\n      > = new Map();\n\n      function newEc(ec: ElementContext) {\n        const mo = new MutationObserver(changes => {\n          if (changes.length === 0) return;\n          if (condFn(ec.el)) {\n            if (!entry.passed) {\n              entry.passed = true;\n              controller.add(ec);\n            }\n          } else {\n            if (entry.passed) {\n              entry.passed = false;\n              controller.remove(ec);\n            }\n          }\n        });\n\n        const entry = { mo, passed: false };\n        if (condFn(ec.el)) {\n          entry.passed = true;\n          controller.add(ec);\n        }\n        mo.observe(ec.el, { attributes: true, attributeFilter });\n        entries.set(ec, entry);\n      }\n\n      function removedEc(ec: ElementContext) {\n        const entry = entries.get(ec);\n        if (!entry)\n          throw new Error('Should not happen: Unseen ElementContext removed');\n        entry.mo.disconnect();\n        if (entry.passed) {\n          controller.remove(ec);\n        }\n        entries.delete(ec);\n      }\n\n      const sub = input.subscribe({\n        start() {\n          input.values().forEach(newEc);\n        },\n        next(changes) {\n          changes.forEach(change => {\n            if (change.type === 'add') {\n              newEc(change.value);\n            } else if (change.type === 'remove') {\n              removedEc(change.value);\n            }\n          });\n        }\n      });\n\n      return {\n        unsubscribe() {\n          sub.unsubscribe();\n          entries.forEach(({ mo }) => {\n            mo.disconnect();\n          });\n        },\n        pullChanges() {\n          sub.pullChanges();\n          // Don't bother doing observer.takeRecords(), we don't need that in\n          // PageParserTree for how we use pullChanges().\n        }\n      };\n    }\n  });\n}\n"],"file":"watchMutations.js"}