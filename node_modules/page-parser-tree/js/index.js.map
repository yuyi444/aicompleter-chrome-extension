{"version":3,"sources":["../src/index.js"],"names":["makeTagOptions","options","map","Map","list","Object","keys","tags","forEach","tag","tagOptions","ownedBy","push","set","finders","concat","watchers","w","has","PageParserTree","root","Scheduler","rootEl","nodeType","Node","DOCUMENT_NODE","documentElement","Error","_options","_logError","logError","err","setTimeout","tagOptionsMap","_tagOptions","_tagsList","tree","TagTree","executor","controller","_treeController","_rootMatchedSet","LiveSet","constant","Set","el","getValue","parents","node","scheduler","_scheduler","_setupWatchersAndFinders","tagsWithWatchers","watcher","add","_ecSources","get","active","liveSet","combinedWatcherSet","s","finder","ecsToTag","elementsToNodes","findParentNode","taggedParents","parentNode","i","length","ecSet","read","listen","setValues","m","cb","ec","addTaggedValue","newParents","subscribe","start","values","value","newValue","next","changes","ecsRemovedInNotification","change","type","remove","nodeParent","getParent","ownsNode","removeTaggedNode","error","complete","end","_subscriptions","sources","selectors","sourceSets","entry","sourceSet","transformer","ecEntry","flush","sub","unsubscribe","getOwned","_dumpWithoutEnd","tagErrStr","size","oldOptions","newOptions","oldOwnedBy","newOwnedBy"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport LiveSet from 'live-set';\nimport type { LiveSetController, LiveSetSubscription } from 'live-set';\nimport liveSetMerge from 'live-set/merge';\nimport liveSetFlatMapR from 'live-set/flatMapR';\nimport Scheduler from 'live-set/Scheduler';\nimport { TagTree } from 'tag-tree';\nimport type { TagTreeController, TagTreeNode } from 'tag-tree';\n\nimport type { NodeTagPair, ElementContext } from './internalTypes';\n\nimport watcherFinderMerger from './watcherFinderMerger';\nimport createTransformer from './createTransformer';\n\nexport type Selector =\n  | string\n  | {| $filter: (el: HTMLElement) => boolean |}\n  | {| $map: (el: HTMLElement) => ?HTMLElement |}\n  | {|\n      $watch: {|\n        attributeFilter: string[],\n        cond: string | ((el: HTMLElement) => boolean)\n      |}\n    |}\n  | {| $or: Array<Array<Selector>> |}\n  | {| $log: string |};\n\nexport type Watcher = {|\n  sources: Array<string | null>,\n  tag: string,\n  selectors: Array<Selector>\n|};\n\nexport type Finder = {|\n  fn(root: HTMLElement): Array<HTMLElement> | NodeList<HTMLElement>,\n  interval?: ?number | ((elementCount: number, timeRunning: number) => number)\n|};\n\nexport type TagOptions = {|\n  ownedBy?: ?$ReadOnlyArray<string>\n|};\n\nexport type PageParserTreeOptions = {|\n  logError?: ?(err: Error, el: void | HTMLElement) => void,\n  tags: { [tag: string]: TagOptions },\n  watchers: $ReadOnlyArray<Watcher>,\n  finders: { [tag: string]: Finder }\n|};\n\nfunction makeTagOptions(options: PageParserTreeOptions) {\n  const map = new Map();\n  const list = [];\n  Object.keys(options.tags).forEach(tag => {\n    const tagOptions = options.tags[tag];\n    const { ownedBy } = tagOptions;\n    list.push({ tag, ownedBy });\n    map.set(tag, tagOptions);\n  });\n  Object.keys(options.finders)\n    .concat(options.watchers.map(w => w.tag))\n    .forEach(tag => {\n      if (!map.has(tag)) {\n        map.set(tag, { ownedBy: [] });\n        list.push({ tag });\n      }\n    });\n  return { map, list };\n}\n\nexport default class PageParserTree {\n  tree: TagTree<HTMLElement>;\n  _scheduler = new Scheduler();\n  _treeController: TagTreeController<HTMLElement>;\n\n  _rootMatchedSet: LiveSet<ElementContext>;\n  _ecSources: Map<\n    string,\n    {\n      liveSet: LiveSet<LiveSet<ElementContext>>,\n      controller: LiveSetController<LiveSet<ElementContext>>,\n      ecSet: LiveSet<ElementContext>\n    }\n  >;\n\n  _logError: (err: Error, el: void | HTMLElement) => void;\n  _options: PageParserTreeOptions;\n  _tagOptions: Map<string, TagOptions>;\n  _tagsList: Array<{| tag: string, ownedBy?: ?$ReadOnlyArray<string> |}>;\n  _subscriptions: Array<LiveSetSubscription> = [];\n\n  constructor(root: Document | HTMLElement, options: PageParserTreeOptions) {\n    let rootEl;\n    if (root.nodeType === Node.DOCUMENT_NODE) {\n      rootEl = ((root: any): Document).documentElement;\n      if (!rootEl) throw new Error('missing documentElement');\n    } else {\n      rootEl = (root: any);\n    }\n\n    this._options = options;\n    this._logError =\n      options.logError ||\n      function(err) {\n        setTimeout(() => {\n          throw err;\n        }, 0);\n      };\n\n    const { map: tagOptionsMap, list: tags } = makeTagOptions(this._options);\n    this._tagOptions = tagOptionsMap;\n    this._tagsList = tags;\n\n    this.tree = new TagTree({\n      root: rootEl,\n      tags,\n      executor: controller => {\n        this._treeController = controller;\n      }\n    });\n    this._rootMatchedSet = LiveSet.constant(\n      new Set([\n        {\n          el: this.tree.getValue(),\n          parents: [{ tag: null, node: this.tree }]\n        }\n      ]),\n      { scheduler: this._scheduler }\n    );\n\n    this._setupWatchersAndFinders();\n  }\n\n  _setupWatchersAndFinders() {\n    const tagsWithWatchers = new Set();\n    this._options.watchers.forEach(watcher => {\n      tagsWithWatchers.add(watcher.tag);\n    });\n\n    this._ecSources = new Map(\n      this._tagsList.map(({ tag }) => {\n        const tagOptions = this._tagOptions.get(tag);\n        if (!tagOptions) throw new Error();\n        const ownedBy = new Set(tagOptions.ownedBy || []);\n\n        const { liveSet, controller } = LiveSet.active(null, {\n          scheduler: this._scheduler\n        });\n        const combinedWatcherSet = tagsWithWatchers.has(tag)\n          ? liveSetFlatMapR(liveSet, s => s)\n          : null;\n        const finder = this._options.finders[tag];\n        const ecsToTag = finder\n          ? watcherFinderMerger(\n              this._scheduler,\n              this.tree,\n              tag,\n              tagOptions,\n              combinedWatcherSet,\n              finder,\n              this._logError\n            )\n          : combinedWatcherSet ||\n            LiveSet.constant(new Set(), { scheduler: this._scheduler });\n\n        const elementsToNodes: Map<\n          HTMLElement,\n          TagTreeNode<HTMLElement>\n        > = new Map();\n\n        function findParentNode(\n          taggedParents: NodeTagPair[]\n        ): TagTreeNode<HTMLElement> {\n          let parentNode;\n          for (let i = taggedParents.length - 1; i >= 0; i--) {\n            if (\n              taggedParents[i].tag == null ||\n              ownedBy.has(taggedParents[i].tag)\n            ) {\n              parentNode = taggedParents[i].node;\n              break;\n            }\n          }\n          if (!parentNode) throw new Error();\n          return parentNode;\n        }\n\n        const ecSet = new LiveSet({\n          scheduler: this._scheduler,\n          read() {\n            throw new Error();\n          },\n          listen: (setValues, controller) => {\n            const m: Map<ElementContext, ElementContext> = new Map();\n\n            const cb = (ec: ElementContext): ElementContext => {\n              const { el, parents } = ec;\n              const parentNode = findParentNode(parents);\n              const node = this._treeController.addTaggedValue(\n                parentNode,\n                tag,\n                el\n              );\n              if (elementsToNodes.has(el)) {\n                this._logError(\n                  new Error(\n                    `PageParserTree(${tag}) watcher received element twice`\n                  ),\n                  el\n                );\n              }\n              elementsToNodes.set(el, node);\n\n              const newParents = ec.parents.concat([{ tag, node }]);\n              return { el, parents: newParents };\n            };\n\n            return ecsToTag.subscribe({\n              start: () => {\n                const s = new Set();\n                ecsToTag.values().forEach(value => {\n                  const newValue = cb(value);\n                  m.set(value, newValue);\n                  s.add(newValue);\n                });\n                setValues(s);\n              },\n              next: changes => {\n                const ecsRemovedInNotification = new Set();\n                if (changes.length > 1) {\n                  changes.forEach(change => {\n                    if (change.type === 'remove') {\n                      ecsRemovedInNotification.add(change.value);\n                    }\n                  });\n                }\n\n                changes.forEach(change => {\n                  if (change.type === 'add') {\n                    // Don't process adds of elements that are removed by a later\n                    // change in this notification.\n                    if (ecsRemovedInNotification.has(change.value)) return;\n                    const newValue = cb(change.value);\n                    m.set(change.value, newValue);\n                    controller.add(newValue);\n                  } else if (change.type === 'remove') {\n                    const newValue = m.get(change.value);\n                    if (!newValue) return;\n                    m.delete(change.value);\n                    controller.remove(newValue);\n\n                    const node = elementsToNodes.get(newValue.el);\n                    if (!node)\n                      throw new Error(\n                        'Should not happen: received removal of unseen element'\n                      );\n                    elementsToNodes.delete(newValue.el);\n                    const nodeParent = node.getParent();\n\n                    // The node might have already been removed from the tree if it\n                    // is owned by a node that was just removed.\n                    if (nodeParent && nodeParent.ownsNode(node)) {\n                      this._treeController.removeTaggedNode(\n                        nodeParent,\n                        tag,\n                        node\n                      );\n                    }\n                  }\n                });\n              },\n              error(err) {\n                controller.error(err);\n              },\n              complete() {\n                controller.end();\n              }\n            });\n          }\n        });\n\n        this._subscriptions.push(ecSet.subscribe({}));\n\n        return [tag, { liveSet, controller, ecSet }];\n      })\n    );\n\n    this._options.watchers.forEach(({ sources, selectors, tag }) => {\n      const sourceSets = sources.map(tag => {\n        if (!tag) return this._rootMatchedSet;\n        const entry = this._ecSources.get(tag);\n        if (!entry) throw new Error('Unknown source: ' + tag);\n        return entry.ecSet;\n      });\n      const sourceSet =\n        sourceSets.length === 1 ? sourceSets[0] : liveSetMerge(sourceSets);\n      const transformer = createTransformer(this._scheduler, selectors);\n\n      const ecEntry = this._ecSources.get(tag);\n      if (!ecEntry) throw new Error();\n      ecEntry.controller.add(transformer(sourceSet));\n    });\n\n    this._scheduler.flush();\n  }\n\n  _dumpWithoutEnd() {\n    this._subscriptions.forEach(sub => {\n      sub.unsubscribe();\n    });\n    this._subscriptions.length = 0;\n    this.tree.getOwned().forEach((liveSet, tag) => {\n      liveSet.values().forEach(node => {\n        this._treeController.removeTaggedNode(this.tree, tag, node);\n      });\n    });\n  }\n\n  dump() {\n    this._dumpWithoutEnd();\n    this._treeController.end();\n  }\n\n  // Intended for use with hot module replacement.\n  replaceOptions(options: PageParserTreeOptions) {\n    const tagErrStr = 'replaceOptions does not support tag changes';\n    const { map: tagOptionsMap } = makeTagOptions(options);\n    if (this._tagOptions.size !== tagOptionsMap.size) {\n      throw new Error(tagErrStr);\n    }\n    this._tagOptions.forEach((oldOptions, tag) => {\n      const newOptions = tagOptionsMap.get(tag);\n      if (!newOptions) throw new Error(tagErrStr);\n      const oldOwnedBy = oldOptions.ownedBy || [];\n      const newOwnedBy = new Set(newOptions.ownedBy || []);\n      if (oldOwnedBy.length !== newOwnedBy.size) throw new Error(tagErrStr);\n      oldOwnedBy.forEach(tag => {\n        if (!newOwnedBy.has(tag)) throw new Error(tagErrStr);\n      });\n    });\n\n    this._dumpWithoutEnd();\n    this._options = options;\n    this._setupWatchersAndFinders();\n  }\n}\n"],"file":"index.js"}